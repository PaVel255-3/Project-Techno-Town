import sqlite3
import telebot
import random
import logging
import requests

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = telebot.TeleBot('7613256994:AAFbcyF3pnuuW4aAl4fZiMYpNKyHXdqvbSI')
API_KEY = '9bbf77f57ccc6526bec4140baee1268a'

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
def initialize_db():
    with sqlite3.connect('db.db') as conn:
        cur = conn.cursor()
        cur.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            pass TEXT NOT NULL DEFAULT 'default_password'
        )
        ''')
        conn.commit()

initialize_db()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_registered(user_id):
    with sqlite3.connect('db.db') as conn:
        cur = conn.cursor()
        cur.execute('SELECT id FROM users WHERE id = ?', (user_id,))
        return cur.fetchone() is not None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, name):
    with sqlite3.connect('db.db') as conn:
        cur = conn.cursor()
        cur.execute('INSERT INTO users (id, name, pass) VALUES (?, ?, ?)', (user_id, name, 'default_password'))
        conn.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({name}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_user(user_id):
    with sqlite3.connect('db.db') as conn:
        cur = conn.cursor()
        cur.execute('DELETE FROM users WHERE id = ?', (user_id,))
        conn.commit()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        bot.send_message(message.chat.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞!')
    else:
        register_user(user_id, message.from_user.first_name)
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@bot.message_handler(commands=['delete'])
def delete(message):
    user_id = message.from_user.id
    if is_user_registered(user_id):
        delete_user(user_id)
        bot.send_message(message.chat.id, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.')
    else:
        bot.send_message(message.chat.id, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')

@bot.message_handler(commands=['build'])
def random_build(message):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–î–µ—à—ë–≤—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π')

    bot.send_message(message.chat.id, "–ö–∞–∫–æ–π –ü–ö –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–±—Ä–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text in ['–î–µ—à—ë–≤—ã–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π'])
def build_selection(message):
    category = message.text
    build = get_random_build(category)
    bot.send_message(message.chat.id, f'–í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}":\n{build}')

def get_random_build(category):
    cheap_builds = [
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Pentium G6400\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: GTX 1650\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 8GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 500GB HDD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Athlon 3000G\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: Vega 3\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 8GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 240GB SSD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i3-10100\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: GTX 1050 Ti\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 8GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 1TB HDD'
    ]

    mid_range_builds = [
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 5 3600\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: GTX 1660 Ti\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 16GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 500GB SSD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i5-11400\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 2060\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 16GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 1TB SSD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7 3700X\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: GTX 1660 Super\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 16GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 512GB SSD'
    ]

    high_end_builds = [
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 9 7900X\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4090\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 32GB DDR5\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 1TB NVMe SSD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: Intel Core i9-13900K\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 4080\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 32GB DDR5\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 2TB NVMe SSD',
        '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: AMD Ryzen 7 5800X3D\n–í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞: RTX 3080 Ti\n–û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: 32GB DDR4\n–ñ–µ—Å—Ç–∫–∏–π –¥–∏—Å–∫: 1TB NVMe SSD'
    ]

    if category == '–î–µ—à—ë–≤—ã–π':
        return random.choice(cheap_builds)
    elif category == '–°—Ä–µ–¥–Ω–∏–π':
        return random.choice(mid_range_builds)
    elif category == '–í—ã—Å–æ–∫–∏–π':
        return random.choice(high_end_builds)

@bot.message_handler(commands=['info'])
def info(message):
    bot.send_message(
        message.chat.id,
        '–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä –ø–æ–¥ —Ç–≤–æ–∏ –Ω—É–∂–¥—ã! üöÄ\n\n'
        'üîß –°–±–æ—Ä–∫–∏ –ü–ö –Ω–∞ –∑–∞–∫–∞–∑: –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–±–æ—Ä–∫–∏ –¥–ª—è –∏–≥—Ä, —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–∏–∫–æ–π, –≤–∏–¥–µ–æ –∏ 3D –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –∞ —Ç–∞–∫–∂–µ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n'
        'üñ• –ü—Ä–æ–¥–∞–∂–∞ –≥–æ—Ç–æ–≤—ã—Ö –ü–ö: –ï—Å–ª–∏ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —Å–æ–±–∏—Ä–∞—Ç—å –ü–ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —É –Ω–∞—Å –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º–∏.\n\n'
        'üí° –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: –ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å? –ú–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö –∏ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∞—è —Å–±–æ—Ä–∫–∞ –∏–ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –ø–æ–¥–æ–π–¥—É—Ç –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.',
        parse_mode='Markdown'
    )

@bot.message_handler(commands=['weather'])
def weather(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É.')

@bot.message_handler(func=lambda message: True)
def handle_weather_or_greeting(message):
    city = message.text.strip()
    if city.lower() in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '—Ö–∞–π']:
        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?')
        return

    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric'
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        weather_desc = data["weather"][0]["description"]
        temp = data["main"]["temp"]
        bot.send_message(
            message.chat.id,
            f'–ü–æ–≥–æ–¥–∞ –≤ {city}:\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n‚òÅÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather_desc}'
        )
    elif response.status_code == 401:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API-–∫–ª—é—á.")
    else:
        bot.send_message(message.chat.id, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

bot.polling(none_stop=True)

